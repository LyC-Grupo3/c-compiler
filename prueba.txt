#+ Esto es un comentario +#

#+ DESCOMENTAR UNO POR UNO PARA PROBAR LOS ERRORES O USAR EL SCRIPT RUN_TEST_ERROR QUE CORRE TODOS LOS ARCHIVOS DE TESTS UNO POR UNO +#
#+ $ a := 1 +#
#+ a := 3.402824e+38 +#
#+ a := -3.402824e+38 +#
#+ a := 32768 +#
#+ a := -32769 +#
#+ a := := a +#
#+ a := "este_es_un_string_muy_largo_que_excede_los_cincuenta_caracteres_permitidos" +#


#+ INIT - Declaración de variables - Declaración del mismo tipo de variable en más de una línea +#
init {
    a1, b1 : float
    var1 : int
    p1, p2, p3 : string
    a2, b2 : float
    var1: string
}



#+                                ASSIGMENTS                            +#
#+ SIN EXP ARIMETICA +#
#+ De paso valido simbolo con igual valor int +#
a := 1
a := 1
a := 2



#+ De paso valido simbolo con igual valor float +#
#+ Valido que no se inserte dos veces el simbolo id a +#
b := 99999.99
b := 99999.99
b := 99.
b := 99.0000
b := .9999



c := "string repetido"
c := "string repetido"
c := "string diferente"



#+ CON EXP ARITMETICA +#
d := 27 - c
d := r + 500
d := 34 * 3
d := z / f



#+ IF sin ELSE +#
#+ Condiciones simples +#
if (a > b)
{
    write("a es mas gr&&e que b y c es mas gr&&e que b")
}



#+ Condiciones compuestas +#
#+ Condición con AND +#
if (a > b && c > b)
{
    write("a es mas gr&&e que b")
}
else
{
    write("a es mas chico o igual a b")
}



#+ IF con ELSE +#
if (a > b)
{
    write("a es mas gr&&e que b")
}
else
{
    write("a es mas chico o igual a b")
}



#+ Condición con NOT +#
if (! a > b)
{
    write("a no es mas gr&&e que b")
}



#+ Condición con OR +#
if (a > b || c > b)
{
    write("a es mas gr&&e que b o c es mas gr&&e que b")
}



#+ IF Anidado +#
if (a > b)
{
    write("a es mas gr&&e que b")
    if (c > d)
    {
        write("c es mas gr&&e que d")
    }
}



#+ WHILE +#
while (a > b)
{
    write("a es mas gr&&e que b")
    a := a + 1
}



#+ READ +#
read(base) #+ base es una variable +#



#+ WRITE +#
write("ewr")  #+ "ewr" es una cte string +#
write(var1)  #+ var1 es una variable numérica definida previamente +#



#+ FUNCIONES +#
y := equalExpressions(0, -5) 
y := equalExpressions(0, -5, a + b) 
y := equalExpressions(a + b, 5, b * 2, 3 - 2, a + b) 


areaMax := triangleAreaMaximum( [0,x; 4.0,12; 2.5,3] ; [x,0; 6,0; z,2] )

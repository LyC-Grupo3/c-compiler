#+                                INIT                            +#
#+ Declaración de variables - Declaración del mismo tipo de variable en más de una línea +#
init {
    varFloat, varFloat1, varFloat2 : float
    a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p : int
    varInt, varInt1, varInt2 : int
    varFloat3, varFloat4 : float
    varString, varString1, varString2 : string
    resultEqualExpressions : int
    resultAreamax : float
    x1, y1, x2, y2, x3, y3 : int
    a1, b1, a2, b2, a3, b3 : int

    #+ 100. Error declaracion variable: La variable variableREPETIDA ya fue declarada previamente como: CONST_FLOAT +#
    #+ variableREPETIDA : float  +#
    #+ variableREPETIDA : int    +#
}




#+                                TEST ERRORES                          +#
#+ Error de validación CONST_FLOAT - El valor excede el rango permitido COTA SUPERIOR +#
#+ varFloat1 := 3.402824e+38                                                     +#


#+ Error de validación CONST_FLOAT - El valor excede el rango permitido COTA INFERIOR +#
#+ varFloat1 := -3.402824e+38                                                    +#


#+ Error de validación CONST_INT - El valor excede el rango permitido COTA SUPERIOR +#
#+ varInt1 := 32768                                                              +#


#+ Error de validación CONST_INT - El valor excede el rango permitido COTA INFERIOR +#
#+ varInt1 := -32769                                                             +#


#+ Error de validación CONST_STR - La longitud del string excede el maximo permitido +#
#+ varString1 := "este_es_un_string_muy_largo_que_excede_los_cincuenta_caracteres_permitidos" +#


#+ 101. Error uso de variable: La variable variableNODECLARADA no fue declarada previamente. +#
#+ variableNODECLARADA := 4 +#


#+ 200. Error resolucion expresion: No se pueden realizar operaciones aritméticas con strings. +#
#+ varInt1 := (varInt1 + varString1) +#


#+ 201. Error resolucion expresion: No se pueden realizar operacion arimenticas entre CONST_FLOAT y CONST_INT. +#
#+ varInt1 := (varInt1 + varFloat1) +#


#+ 300. Error asignacion expresion: La variable variableINT es de tipo CONST_INT no se le puede asignar una expresion de tipo CONST_FLOAT. +#
#+ varInt1 := (4.5 + 4.5) +#


#+ 301. Error asignacion string: La variable variableINT es de tipo CONST_INT no se le puede asignar un string. +#
#+ varInt1 := "cadena" +#


#+ 400. Error comparacion: No se pueden realizar comparaciones con strings. +#
#+ if ( varInt1 > varString1 ) { write("Hola") } +#


#+ 401. Error comparacion: No se pueden realizar comparaciones entre: CONST_FLOAT y CONST_INT. +#
#+ if ( varInt1 > varFloat1 ) { write("Hola") } +#




#+                                ASSIGMENTS                            +#

#+ SIN EXP ARIMETICA +#
varInt1 := 1
varInt1 := 1
varInt2 := 2



varFloat1 := 99999.99
varFloat1 := 99999.99
varFloat2 := 99.
varFloat2:= 99.0000
varFloat3 := .9999



varString1 := "string repetido"
varString1 := "string repetido"
varString2 := "string diferente"



#+ CON EXP ARITMETICA +#
varInt1 := 27 - varInt2
varInt2 := varInt1 + 500
varFloat1 := varFloat2 / 4.0
varFloat2 := 34.4 * 3.1


#+                                SELECCION - CONDICIONES SIMPLES                            +#
a := 1
b := 0

#+ IF sin ELSE +#
if (a > b)
{
    write("1. verdad IF simple")
}



#+ IF con ELSE +#
a := 1
b := 0

if (a > b)
{
    write("1. verdad IF-ELSE simple")
}
else
{
    write("falso IF-ELSE simple")
}

a :=b

if (a > b)
{
    write("verdad IF-ELSE simple")
}
else
{
    write("2. falso IF-ELSE simple")
}



#+                                SELECCION - CONDICIONES COMPUESTAS                            +#

#+ Condición IF con AND +#
a := 1
b := 0
c := 1
d := 0

if (a > b && c > b)
{
    write("3. verdad IF AND")
}



#+ Condición IF ELSE con AND +#
a := 1
b := 0
c := 1
d := 0

if (a > b && c > b)
{
    write("4. verdad IF-ELSE AND")
}
else
{
    write("falso IF-ELSE AND")
}

c :=b
if (a > b && c > b)
{
    write("verdad IF-ELSE AND")
}
else
{
    write("5. falso IF-ELSE AND")
}



#+ Condición IF con OR +#
a := 0
b := 1
c := 1
d := 0

if (a > b || c > d)
{
    write("6. verdad OR")
}



#+ Condición IF ELSE con OR +#
a := 0
b := 1
c := 1
d := 0

if (a > b || c > d)
{
    write("7. verdad IF-ELSE OR")
}
else
{
    write("falso IF-ELSE OR")
}

a := b
c := d

if (a > b || c > d)
{
    write("verdad IF-ELSE OR")
}
else
{
    write("8. falso IF-ELSE OR")
}



#+                                ITERACION - CONDICIONES SIMPLES                            +#
#+ Condición WHILE simple +#
a := 1
b := 0

while (a > b)
{
    write("9. dentro WHILE simple")
    b := a
}



#+                                ITERACION - CONDICIONES COMPUESTAS                            +#
#+ Condición WHILE con AND +#
a := 1
b := 0
c := 1
d := 0

while (a > b && c > d)
{
    write("10. dentro WHILE compuesto AND")
    b := a
    d := c
}



#+ Condición WHILE con OR +#
a := 0
b := 1
c := 1
d := 0

while (a > b || c > d)
{
    write("11. dentro WHILE compuesto OR")
    c := d
}



#+                                CONDICION CON NOT                            +#
#+ Condición IF con NOT +#
a := 0
b := 1

if (! a > b)
{
    write("12. negado SIMPLE")
    a := 9999
}



#+ Condición WHILE con NOT +#
a := 0
b := 1

while (! a > b)
{
    write("13. dentro WHILE compuesto NOT")
    a := 9999
}



#+                                CONDICIONES ANIDADAS                            +#
a := 1
b := 0
c := 1
d := 0

if (a > b)
{
    write("14. true a>b")
    if (c > d)
    {
        write("15. true anidado")
    }

    while (e < f)
    {
        write("16. dentro WHILE anidado")
        e := f
    }
}


#+ WRITE +#
varFloat := 123.456
write("17. write varFloat valor: ")
write(varFloat)

varInt := 789
write("18. write varInt valor: ")
write(varInt)

varString := "cadena"
write("19. write varString valor: ")
write(varString)

write("20. write cadena literal")


#+ FUNCIONES - EQUAL EXPRESSIONS +#
resultEqualExpressions := equalExpressions(1.5 + 1.5, 1 + 2) 

if(resultEqualExpressions == 1)
{
    write("21. EXPRESIONES IGUALES")
}
else
{
    write("EXPRESIONES DISTINTAS")
}


resultEqualExpressions := equalExpressions(1 + 2, 1 + 100, 1.5 + 1.5) 

if(resultEqualExpressions == 1)
{
    write("22. EXPRESIONES IGUALES")
}
else
{
    write("EXPRESIONES DISTINTAS")
}



#+ FUNCIONES - TRIANGLE AREA +#
resultAreamax := triangleAreaMaximum( [1,1; 1,1; 1,1] ; [-2,1; 3,2; 1,5] )

if(resultAreamax == 8.5)
{
    write("23. Resultado correcto triangleAreaMaximum")
    write(resultAreamax)
}
else
{
    write("Resultado incorrecto triangleAreaMaximum")
    write(resultAreamax)
}


resultAreamax := triangleAreaMaximum( [1,1; 1,1; 1,1] ; [-2,1; 3,2; 1,5] )

if(resultAreamax == 8.5)
{
    write("24. Resultado correcto triangleAreaMaximum")
    write(resultAreamax)
}
else
{
    write("Resultado incorrecto triangleAreaMaximum")
    write(resultAreamax)
}

#+ FUNCIONES - READ +#
write("26. Ingrese texto para variable string:")
read(varString)
write("El valor de la variable de tipo string es:")
write(varString)



write("27. Ingrese valor int para variable int:")
read(varInt)
write("El valor de la variable de tipo int es:")
write(varInt)



write("28. Ingrese valor float para variable float:")
read(varFloat)
write("El valor de la variable de tipo float es:")
write(varFloat)

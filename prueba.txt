#+ Esto es un comentario +#

#+                                INIT                            +#
#+ Declaración de variables - Declaración del mismo tipo de variable en más de una línea +#
init {
    varFloat1, varFloat2 : float
    a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p : int
    varInt1, varInt2 : int
    varFloat3, varFloat4 : float
    varString1, varString2 : string
    resultEqualExpressions : int
    resultAreamax : float
    x1, y1, x2, y2, x3, y3 : int
    a1, b1, a2, b2, a3, b3 : int
}



#+                                ASSIGMENTS                            +#

#+ SIN EXP ARIMETICA +#
varInt1 := 1
varInt1 := 1
varInt2 := 2



varFloat1 := 99999.99
varFloat1 := 99999.99
varFloat2 := 99.
varFloat2:= 99.0000
varFloat3 := .9999



varString1 := "string repetido"
varString1 := "string repetido"
varString2 := "string diferente"



#+ CON EXP ARITMETICA +#
varInt1 := 27 - varInt2
varInt2 := varInt1 + 500
varFloat1 := varFloat2 / 4.0
varFloat2 := 34.4 * 3.1


#+                                SELECCION - CONDICIONES SIMPLES                            +#

#+ IF sin ELSE +#
if (a > b)
{
    write("verdad IF simple")
}



#+ IF con ELSE +#
if (a > b)
{
    write("verdad IF-ELSE simple")
}
else
{
    write("falso IF-ELSE simple")
}



#+                                SELECCION - CONDICIONES COMPUESTAS                            +#

#+ Condición IF con AND +#
if (a > b && c > b)
{
    write("verdad IF AND")
}



#+ Condición IF ELSE con AND +#
if (a > b && c > b)
{
    write("verdad IF-ELSE AND")
}
else
{
    write("falso IF-ELSE AND")
}



#+ Condición IF con OR +#
if (a > b || c > b)
{
    write("verdad OR")
}



#+ Condición IF ELSE con OR +#
if (a > b || c > b)
{
    write("verdad IF-ELSE OR")
}
else
{
    write("falso IF-ELSE OR")
}


#+                                ITERACION - CONDICIONES SIMPLES                            +#
#+ Condición WHILE simple +#
while (a > b)
{
    write("dentro WHILE simple")
}



#+                                ITERACION - CONDICIONES COMPUESTAS                            +#
#+ Condición WHILE con AND +#
while (a > b && c > d)
{
    write("dentro WHILE compuesto AND")
}



#+ Condición WHILE con OR +#
while (a > b || c > d)
{
    write("dentro WHILE compuesto OR")
}



#+                                CONDICION CON NOT                            +#
#+ Condición IF con NOT +#
if (! a > b)
{
    write("negado SIMPLE")
}



#+ Condición WHILE con NOT +#
while (! a > b)
{
    write("dentro WHILE compuesto NOT")
}



#+                                CONDICIONES ANIDADAS                            +#
if (a > b)
{
    write("true a>b")
    if (c > d)
    {
        write("true anidado")
    }

    while (e < f)
    {
        write("dentro WHILE anidado")
    }
}



#+ READ +#
read(varInt1)    #+ base es una variable +#



#+ WRITE +#
write("cadena")  #+ "cadena" es una cte string +#
write(varInt1)   #+ varInt1 es una variable numérica definida previamente +#



#+ FUNCIONES +#
resultEqualExpressions := equalExpressions(a, b) 
resultEqualExpressions := equalExpressions(0, -5, a + b) 
resultEqualExpressions := equalExpressions(a + b, 5, b * 2, 3 - 2, a + b) 


resultAreamax := triangleAreaMaximum( [x1,y1; x2,y2; x3,y3] ; [a1,b1; a2,b2; a3,b3] )
